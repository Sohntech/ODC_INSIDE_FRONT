"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/referentials/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attendanceAPI: function() { return /* binding */ attendanceAPI; },\n/* harmony export */   authAPI: function() { return /* binding */ authAPI; },\n/* harmony export */   coachesAPI: function() { return /* binding */ coachesAPI; },\n/* harmony export */   gradesAPI: function() { return /* binding */ gradesAPI; },\n/* harmony export */   learnersAPI: function() { return /* binding */ learnersAPI; },\n/* harmony export */   modulesAPI: function() { return /* binding */ modulesAPI; },\n/* harmony export */   promotionsAPI: function() { return /* binding */ promotionsAPI; },\n/* harmony export */   referentialsAPI: function() { return /* binding */ referentialsAPI; },\n/* harmony export */   usersAPI: function() { return /* binding */ usersAPI; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n// Create an Axios instance with base URL and default headers\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"http://localhost:3000\" || 0,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Add a request interceptor to add the auth token to every request\napi.interceptors.request.use((config)=>{\n    // Get the token from localStorage if we're in the browser\n    if (true) {\n        const token = localStorage.getItem(\"accessToken\");\n        if (token) {\n            config.headers.Authorization = \"Bearer \".concat(token);\n        }\n    }\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Add a response interceptor to handle common errors\napi.interceptors.response.use((response)=>response, (error)=>{\n    // Handle authentication errors\n    if (error.response && error.response.status === 401) {\n        // If we're in the browser, clear the token and redirect to login\n        if (true) {\n            localStorage.removeItem(\"accessToken\");\n            localStorage.removeItem(\"user\");\n            window.location.href = \"/\";\n        }\n    }\n    return Promise.reject(error);\n});\n// Auth API calls\nconst authAPI = {\n    login: async (email, password)=>{\n        try {\n            console.log(\"API call: Attempting login with:\", {\n                email\n            });\n            console.log(\"API URL being used:\", \"http://localhost:3000\" || 0);\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/api/auth/login\", {\n                email,\n                password\n            });\n            console.log(\"API response received:\", response.status);\n            if (response.data && response.status === 200) {\n                return response.data;\n            } else {\n                console.error(\"Unexpected API response format:\", response);\n                throw new Error(\"Invalid response format from server\");\n            }\n        } catch (error) {\n            console.error(\"Login API error:\", error);\n            throw error;\n        }\n    }\n};\n// Learners API calls\nconst learnersAPI = {\n    getAllLearners: async ()=>{\n        try {\n            const response = await api.get(\"/learners\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLearnerById: async (id)=>{\n        try {\n            const response = await api.get(\"/learners/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLearnerAttendanceStats: async (id)=>{\n        try {\n            const response = await api.get(\"/learners/\".concat(id, \"/attendance-stats\"));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getGenderDistribution: async ()=>{\n        try {\n            const response = await api.get(\"/learners/stats/gender\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateLearnerStatus: async (id, status, reason)=>{\n        try {\n            const response = await api.patch(\"/learners/\".concat(id, \"/status\"), {\n                status,\n                reason\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateLearnerKit: async (id, kitData)=>{\n        try {\n            const response = await api.put(\"/learners/\".concat(id, \"/kit\"), kitData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getWaitingList: async (promotionId)=>{\n        try {\n            const url = promotionId ? \"/learners/waiting-list?promotionId=\".concat(promotionId) : \"/learners/waiting-list\";\n            const response = await api.get(url);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    replaceLearner: async (replacedId, replacementId)=>{\n        try {\n            const response = await api.post(\"/learners/replace\", {\n                replacedId,\n                replacementId\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLearnerByEmail: async (email)=>{\n        try {\n            const response = await api.get(\"/learners/email/\".concat(email));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching learner by email:\", error);\n            return null;\n        }\n    }\n};\n// Modules API calls\nconst modulesAPI = {\n    getAllModules: async ()=>{\n        try {\n            const response = await api.get(\"/modules\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getModuleById: async (id)=>{\n        try {\n            const response = await api.get(\"/modules/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getActiveModulesByLearner: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/modules/active/learner/\".concat(learnerId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createModule: async (moduleData)=>{\n        try {\n            const response = await api.post(\"/modules\", moduleData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateModule: async (id, moduleData)=>{\n        try {\n            const response = await api.put(\"/modules/\".concat(id), moduleData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    deleteModule: async (id)=>{\n        try {\n            const response = await api.delete(\"/modules/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Referentials API calls\nconst referentialsAPI = {\n    getAllReferentials: async ()=>{\n        try {\n            const response = await api.get(\"/referentials\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getReferentialById: async (id)=>{\n        try {\n            const response = await api.get(\"/referentials/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createReferential: async (referentialData)=>{\n        try {\n            const response = await api.post(\"/referentials\", referentialData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateReferential: async (id, referentialData)=>{\n        try {\n            const response = await api.put(\"/referentials/\".concat(id), referentialData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    deleteReferential: async (id)=>{\n        try {\n            const response = await api.delete(\"/referentials/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Grades API calls\nconst gradesAPI = {\n    getGradesByLearner: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/grades/learner/\".concat(learnerId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getGradesByModule: async (moduleId)=>{\n        try {\n            const response = await api.get(\"/grades/module/\".concat(moduleId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createGrade: async (gradeData)=>{\n        try {\n            const response = await api.post(\"/grades\", gradeData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateGrade: async (id, gradeData)=>{\n        try {\n            const response = await api.put(\"/grades/\".concat(id), gradeData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    deleteGrade: async (id)=>{\n        try {\n            const response = await api.delete(\"/grades/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Attendance API calls\nconst attendanceAPI = {\n    getAttendanceByLearner: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/attendance/learner/\".concat(learnerId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getDailyStats: async (date)=>{\n        try {\n            const response = await api.get(\"/attendance/stats/daily?date=\".concat(date));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getMonthlyStats: async (year, month)=>{\n        try {\n            const response = await api.get(\"/attendance/stats/monthly?year=\".concat(year, \"&month=\").concat(month));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getYearlyStats: async (year)=>{\n        try {\n            const response = await api.get(\"/attendance/stats/yearly?year=\".concat(year));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLatestScans: async function() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        try {\n            const response = await api.get(\"/attendance/scans/latest?limit=\".concat(limit));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    scanLearner: async (qrCode)=>{\n        try {\n            const response = await api.post(\"/attendance/scan\", {\n                qrCode\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    approveJustification: async (attendanceId, approved, comment)=>{\n        try {\n            const response = await api.patch(\"/attendance/\".concat(attendanceId, \"/justify\"), {\n                status: approved ? \"APPROVED\" : \"REJECTED\",\n                comment\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Promotions API calls\nconst promotionsAPI = {\n    getAllPromotions: async ()=>{\n        try {\n            const response = await api.get(\"/promotions\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getPromotionById: async (id)=>{\n        try {\n            const response = await api.get(\"/promotions/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createPromotion: async (promotionData)=>{\n        try {\n            const response = await api.post(\"/promotions\", promotionData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Coaches API calls\nconst coachesAPI = {\n    getCoachByEmail: async (email)=>{\n        try {\n            const response = await api.get(\"/coaches/email/\".concat(email));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching coach by email:\", error);\n            return null;\n        }\n    }\n};\n// Users API calls\nconst usersAPI = {\n    getUserByEmail: async (email)=>{\n        try {\n            const response = await api.get(\"/users/email/\".concat(email));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching user by email:\", error);\n            return null;\n        }\n    },\n    getUserById: async (id)=>{\n        try {\n            const response = await api.get(\"/users/\".concat(id));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching user by id:\", error);\n            return null;\n        }\n    },\n    getUserDetailsWithPhoto: async (email)=>{\n        try {\n            const user = await api.get(\"/users/email/\".concat(email));\n            if (!user.data) return null;\n            // Get specific role details based on user's role\n            let details = null;\n            switch(user.data.role){\n                case \"APPRENANT\":\n                    details = await learnersAPI.getLearnerByEmail(email);\n                    break;\n                case \"COACH\":\n                    details = await coachesAPI.getCoachByEmail(email);\n                    break;\n                case \"VIGIL\":\n                case \"RESTAURATEUR\":\n                case \"ADMIN\":\n                    // Get photo directly from the user photo endpoint\n                    const photoData = await usersAPI.getUserPhoto(email);\n                    details = {\n                        photoUrl: photoData\n                    };\n                    break;\n            }\n            return {\n                ...user.data,\n                details,\n                photoUrl: details === null || details === void 0 ? void 0 : details.photoUrl\n            };\n        } catch (error) {\n            console.error(\"Error fetching user details:\", error);\n            return null;\n        }\n    },\n    getUserPhoto: async (email)=>{\n        try {\n            const response = await api.get(\"/users/photo/\".concat(email));\n            return response.data.photoUrl;\n        } catch (error) {\n            console.error(\"Error fetching user photo:\", error);\n            return null;\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});