"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attendanceAPI: function() { return /* binding */ attendanceAPI; },\n/* harmony export */   authAPI: function() { return /* binding */ authAPI; },\n/* harmony export */   coachesAPI: function() { return /* binding */ coachesAPI; },\n/* harmony export */   gradesAPI: function() { return /* binding */ gradesAPI; },\n/* harmony export */   learnersAPI: function() { return /* binding */ learnersAPI; },\n/* harmony export */   modulesAPI: function() { return /* binding */ modulesAPI; },\n/* harmony export */   promotionsAPI: function() { return /* binding */ promotionsAPI; },\n/* harmony export */   referentialsAPI: function() { return /* binding */ referentialsAPI; },\n/* harmony export */   usersAPI: function() { return /* binding */ usersAPI; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n// Create an Axios instance with base URL and default headers\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"http://localhost:3000\" || 0,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Add a request interceptor to add the auth token to every request\napi.interceptors.request.use((config)=>{\n    // Get the token from localStorage if we're in the browser\n    if (true) {\n        const token = localStorage.getItem(\"accessToken\");\n        if (token) {\n            config.headers.Authorization = \"Bearer \".concat(token);\n        }\n    }\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Add a response interceptor to handle common errors\napi.interceptors.response.use((response)=>response, (error)=>{\n    // Handle authentication errors\n    if (error.response && error.response.status === 401) {\n        // If we're in the browser, clear the token and redirect to login\n        if (true) {\n            localStorage.removeItem(\"accessToken\");\n            localStorage.removeItem(\"user\");\n            window.location.href = \"/\";\n        }\n    }\n    return Promise.reject(error);\n});\n// Auth API calls\nconst authAPI = {\n    login: async (email, password)=>{\n        try {\n            console.log(\"API call: Attempting login with:\", {\n                email\n            });\n            console.log(\"API URL being used:\", \"http://localhost:3000\" || 0);\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/api/auth/login\", {\n                email,\n                password\n            });\n            console.log(\"API response received:\", response.status);\n            if (response.data && response.status === 200) {\n                return response.data;\n            } else {\n                console.error(\"Unexpected API response format:\", response);\n                throw new Error(\"Invalid response format from server\");\n            }\n        } catch (error) {\n            console.error(\"Login API error:\", error);\n            throw error;\n        }\n    }\n};\n// Learners API calls\nconst learnersAPI = {\n    getAllLearners: async ()=>{\n        try {\n            const response = await api.get(\"/learners\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLearnerById: async (id)=>{\n        try {\n            const response = await api.get(\"/learners/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLearnerAttendanceStats: async (id)=>{\n        try {\n            const response = await api.get(\"/learners/\".concat(id, \"/attendance-stats\"));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getGenderDistribution: async ()=>{\n        try {\n            const response = await api.get(\"/learners/stats/gender\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateLearnerStatus: async (id, status, reason)=>{\n        try {\n            const response = await api.patch(\"/learners/\".concat(id, \"/status\"), {\n                status,\n                reason\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateLearnerKit: async (id, kitData)=>{\n        try {\n            const response = await api.put(\"/learners/\".concat(id, \"/kit\"), kitData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getWaitingList: async (promotionId)=>{\n        try {\n            const url = promotionId ? \"/learners/waiting-list?promotionId=\".concat(promotionId) : \"/learners/waiting-list\";\n            const response = await api.get(url);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    replaceLearner: async (replacedId, replacementId)=>{\n        try {\n            const response = await api.post(\"/learners/replace\", {\n                replacedId,\n                replacementId\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLearnerByEmail: async (email)=>{\n        try {\n            const response = await api.get(\"/learners/email/\".concat(email));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching learner by email:\", error);\n            return null;\n        }\n    }\n};\n// Modules API calls\nconst modulesAPI = {\n    getAllModules: async ()=>{\n        try {\n            const response = await api.get(\"/modules\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getModuleById: async (id)=>{\n        try {\n            const response = await api.get(\"/modules/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getActiveModulesByLearner: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/modules/active/learner/\".concat(learnerId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createModule: async (moduleData)=>{\n        try {\n            const response = await api.post(\"/modules\", moduleData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateModule: async (id, moduleData)=>{\n        try {\n            const response = await api.put(\"/modules/\".concat(id), moduleData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    deleteModule: async (id)=>{\n        try {\n            const response = await api.delete(\"/modules/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Referentials API calls\nconst referentialsAPI = {\n    getAllReferentials: async ()=>{\n        try {\n            const response = await api.get(\"/referentials\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getReferentialById: async (id)=>{\n        try {\n            const response = await api.get(\"/referentials/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createReferential: async (referentialData)=>{\n        try {\n            const response = await api.post(\"/referentials\", referentialData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateReferential: async (id, referentialData)=>{\n        try {\n            const response = await api.put(\"/referentials/\".concat(id), referentialData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    deleteReferential: async (id)=>{\n        try {\n            const response = await api.delete(\"/referentials/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Grades API calls\nconst gradesAPI = {\n    getGradesByLearner: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/grades/learner/\".concat(learnerId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getGradesByModule: async (moduleId)=>{\n        try {\n            const response = await api.get(\"/grades/module/\".concat(moduleId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createGrade: async (gradeData)=>{\n        try {\n            const response = await api.post(\"/grades\", gradeData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateGrade: async (id, gradeData)=>{\n        try {\n            const response = await api.put(\"/grades/\".concat(id), gradeData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    deleteGrade: async (id)=>{\n        try {\n            const response = await api.delete(\"/grades/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Attendance API calls\nconst attendanceAPI = {\n    getAttendanceByLearner: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/attendance/learner/\".concat(learnerId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getDailyStats: async (date)=>{\n        try {\n            const response = await api.get(\"/attendance/stats/daily?date=\".concat(date));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getMonthlyStats: async (year, month)=>{\n        try {\n            const response = await api.get(\"/attendance/stats/monthly?year=\".concat(year, \"&month=\").concat(month));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getYearlyStats: async (year)=>{\n        try {\n            const response = await api.get(\"/attendance/stats/yearly?year=\".concat(year));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLatestScans: async function() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        try {\n            const response = await api.get(\"/attendance/scans/latest?limit=\".concat(limit));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    scanLearner: async (qrCode)=>{\n        try {\n            const response = await api.post(\"/attendance/scan\", {\n                qrCode\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    approveJustification: async (attendanceId, approved, comment)=>{\n        try {\n            const response = await api.patch(\"/attendance/\".concat(attendanceId, \"/justify\"), {\n                status: approved ? \"APPROVED\" : \"REJECTED\",\n                comment\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Promotions API calls\nconst promotionsAPI = {\n    getAllPromotions: async ()=>{\n        try {\n            const response = await api.get(\"/promotions\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getPromotionById: async (id)=>{\n        try {\n            const response = await api.get(\"/promotions/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createPromotion: async (promotionData)=>{\n        try {\n            const response = await api.post(\"/promotions\", promotionData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Coaches API calls\nconst coachesAPI = {\n    getCoachByEmail: async (email)=>{\n        try {\n            const response = await api.get(\"/coaches/email/\".concat(email));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching coach by email:\", error);\n            return null;\n        }\n    }\n};\n// Users API calls\nconst usersAPI = {\n    getUserByEmail: async (email)=>{\n        try {\n            const response = await api.get(\"/users/email/\".concat(email));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching user by email:\", error);\n            return null;\n        }\n    },\n    getUserById: async (id)=>{\n        try {\n            const response = await api.get(\"/users/\".concat(id));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching user by id:\", error);\n            return null;\n        }\n    },\n    getUserDetailsWithPhoto: async (email)=>{\n        try {\n            const user = await api.get(\"/users/email/\".concat(email));\n            if (!user.data) return null;\n            // Get specific role details based on user's role\n            let details = null;\n            switch(user.data.role){\n                case \"APPRENANT\":\n                    details = await learnersAPI.getLearnerByEmail(email);\n                    break;\n                case \"COACH\":\n                    details = await coachesAPI.getCoachByEmail(email);\n                    break;\n            }\n            return {\n                ...user.data,\n                details,\n                photoUrl: details === null || details === void 0 ? void 0 : details.photoUrl\n            };\n        } catch (error) {\n            console.error(\"Error fetching user details:\", error);\n            return null;\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBTztRQUNUO0lBQ0Y7QUFDRixFQUFFO0FBRUYsK0RBQWVmLEdBQUdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2FwaS50cz82OGExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbi8vIENyZWF0ZSBhbiBBeGlvcyBpbnN0YW5jZSB3aXRoIGJhc2UgVVJMIGFuZCBkZWZhdWx0IGhlYWRlcnNcbmNvbnN0IGFwaSA9IGF4aW9zLmNyZWF0ZSh7XG4gIGJhc2VVUkw6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCcsXG4gIGhlYWRlcnM6IHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICB9LFxufSk7XG5cbi8vIEFkZCBhIHJlcXVlc3QgaW50ZXJjZXB0b3IgdG8gYWRkIHRoZSBhdXRoIHRva2VuIHRvIGV2ZXJ5IHJlcXVlc3RcbmFwaS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoXG4gIChjb25maWcpID0+IHtcbiAgICAvLyBHZXQgdGhlIHRva2VuIGZyb20gbG9jYWxTdG9yYWdlIGlmIHdlJ3JlIGluIHRoZSBicm93c2VyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhY2Nlc3NUb2tlbicpO1xuICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSBgQmVhcmVyICR7dG9rZW59YDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSxcbiAgKGVycm9yKSA9PiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuKTtcblxuLy8gQWRkIGEgcmVzcG9uc2UgaW50ZXJjZXB0b3IgdG8gaGFuZGxlIGNvbW1vbiBlcnJvcnNcbmFwaS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKFxuICAocmVzcG9uc2UpID0+IHJlc3BvbnNlLFxuICAoZXJyb3IpID0+IHtcbiAgICAvLyBIYW5kbGUgYXV0aGVudGljYXRpb24gZXJyb3JzXG4gICAgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAvLyBJZiB3ZSdyZSBpbiB0aGUgYnJvd3NlciwgY2xlYXIgdGhlIHRva2VuIGFuZCByZWRpcmVjdCB0byBsb2dpblxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdhY2Nlc3NUb2tlbicpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcicpO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuKTtcblxuLy8gQXV0aCBBUEkgY2FsbHNcbmV4cG9ydCBjb25zdCBhdXRoQVBJID0ge1xuICBsb2dpbjogYXN5bmMgKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ0FQSSBjYWxsOiBBdHRlbXB0aW5nIGxvZ2luIHdpdGg6JywgeyBlbWFpbCB9KTtcbiAgICAgIGNvbnNvbGUubG9nKCdBUEkgVVJMIGJlaW5nIHVzZWQ6JywgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAwJyk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdCgnL2FwaS9hdXRoL2xvZ2luJywgeyBlbWFpbCwgcGFzc3dvcmQgfSk7XG4gICAgICBjb25zb2xlLmxvZygnQVBJIHJlc3BvbnNlIHJlY2VpdmVkOicsIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICBcbiAgICAgIGlmIChyZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBBUEkgcmVzcG9uc2UgZm9ybWF0OicsIHJlc3BvbnNlKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdCBmcm9tIHNlcnZlcicpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdMb2dpbiBBUEkgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxufTtcblxuLy8gVHlwZXMgYmFzZWQgb24gZGF0YWJhc2Ugc2NoZW1hXG5leHBvcnQgaW50ZXJmYWNlIFVzZXIge1xuICBpZDogc3RyaW5nO1xuICBlbWFpbDogc3RyaW5nO1xuICByb2xlOiAnQURNSU4nIHwgJ0NPQUNIJyB8ICdBUFBSRU5BTlQnIHwgJ1JFU1RBVVJBVEVVUicgfCAnVklHSUwnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlYXJuZXIge1xuICBbeDogc3RyaW5nXTogYW55O1xuICBlbWFpbDogUmVhY3ROb2RlO1xuICBpZDogc3RyaW5nO1xuICBmaXJzdE5hbWU6IHN0cmluZztcbiAgbGFzdE5hbWU6IHN0cmluZztcbiAgYWRkcmVzcz86IHN0cmluZztcbiAgZ2VuZGVyOiAnTUFMRScgfCAnRkVNQUxFJztcbiAgYmlydGhEYXRlOiBzdHJpbmc7XG4gIGJpcnRoUGxhY2U6IHN0cmluZztcbiAgcGhvbmU6IHN0cmluZztcbiAgcGhvdG9Vcmw/OiBzdHJpbmc7XG4gIHN0YXR1czogJ0FDVElWRScgfCAnSU5BQ1RJVkUnIHwgJ1NVU1BFTkRFRCcgfCAnUkVQTEFDRUQnIHwgJ1dBSVRJTkdfTElTVCc7XG4gIHFyQ29kZTogc3RyaW5nO1xuICB1c2VySWQ6IHN0cmluZztcbiAgcmVmSWQ/OiBzdHJpbmc7XG4gIHByb21vdGlvbklkOiBzdHJpbmc7XG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xuICB1cGRhdGVkQXQ6IHN0cmluZztcbiAgcmVmZXJlbnRpYWw/OiBSZWZlcmVudGlhbDtcbiAgcHJvbW90aW9uPzogUHJvbW90aW9uO1xuICBhdHRlbmRhbmNlcz86IExlYXJuZXJBdHRlbmRhbmNlW107XG4gIGtpdD86IEtpdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm9tb3Rpb24ge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHN0YXJ0RGF0ZTogc3RyaW5nO1xuICBlbmREYXRlOiBzdHJpbmc7XG4gIHBob3RvVXJsPzogc3RyaW5nO1xuICBzdGF0dXM6ICdBQ1RJVkUnIHwgJ0NPTVBMRVRFRCcgfCAnQ0FOQ0VMTEVEJztcbiAgbGVhcm5lcnM/OiBMZWFybmVyW107XG4gIHJlZmVyZW50aWFscz86IFJlZmVyZW50aWFsW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVmZXJlbnRpYWwge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBwaG90b1VybD86IHN0cmluZztcbiAgY2FwYWNpdHk6IG51bWJlcjtcbiAgbGVhcm5lcnM/OiBMZWFybmVyW107XG4gIG1vZHVsZXM/OiBNb2R1bGVbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2R1bGUge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBwaG90b1VybD86IHN0cmluZztcbiAgc3RhcnREYXRlOiBzdHJpbmc7XG4gIGVuZERhdGU6IHN0cmluZztcbiAgY29hY2hJZDogc3RyaW5nO1xuICByZWZJZDogc3RyaW5nO1xuICByZWZlcmVudGlhbD86IFJlZmVyZW50aWFsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlYXJuZXJBdHRlbmRhbmNlIHtcbiAgaWQ6IHN0cmluZztcbiAgZGF0ZTogc3RyaW5nO1xuICBpc1ByZXNlbnQ6IGJvb2xlYW47XG4gIGlzTGF0ZTogYm9vbGVhbjtcbiAgc2NhblRpbWU/OiBzdHJpbmc7XG4gIGp1c3RpZmljYXRpb24/OiBzdHJpbmc7XG4gIGp1c3RpZmljYXRpb25Db21tZW50Pzogc3RyaW5nO1xuICBzdGF0dXM6ICdQRU5ESU5HJyB8ICdBUFBST1ZFRCcgfCAnUkVKRUNURUQnO1xuICBkb2N1bWVudFVybD86IHN0cmluZztcbiAgbGVhcm5lcklkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2l0IHtcbiAgaWQ6IHN0cmluZztcbiAgbGFwdG9wOiBib29sZWFuO1xuICBjaGFyZ2VyOiBib29sZWFuO1xuICBiYWc6IGJvb2xlYW47XG4gIHBvbG86IGJvb2xlYW47XG4gIGxlYXJuZXJJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdHRlbmRhbmNlU3RhdHMge1xuICBwcmVzZW50OiBudW1iZXI7XG4gIGFic2VudDogbnVtYmVyO1xuICBsYXRlOiBudW1iZXI7XG4gIHRvdGFsRGF5czogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdyYWRlIHtcbiAgaWQ6IHN0cmluZztcbiAgc2NvcmU6IG51bWJlcjtcbiAgY29tbWVudD86IHN0cmluZztcbiAgZGF0ZTogc3RyaW5nO1xuICBtb2R1bGVJZDogc3RyaW5nO1xuICBsZWFybmVySWQ6IHN0cmluZztcbiAgbW9kdWxlPzogTW9kdWxlO1xuICBsZWFybmVyPzogTGVhcm5lcjtcbn1cblxuLy8gTGVhcm5lcnMgQVBJIGNhbGxzXG5leHBvcnQgY29uc3QgbGVhcm5lcnNBUEkgPSB7XG4gIGdldEFsbExlYXJuZXJzOiBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2xlYXJuZXJzJyk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZ2V0TGVhcm5lckJ5SWQ6IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL2xlYXJuZXJzLyR7aWR9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZ2V0TGVhcm5lckF0dGVuZGFuY2VTdGF0czogYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvbGVhcm5lcnMvJHtpZH0vYXR0ZW5kYW5jZS1zdGF0c2ApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGdldEdlbmRlckRpc3RyaWJ1dGlvbjogYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9sZWFybmVycy9zdGF0cy9nZW5kZXInKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICB1cGRhdGVMZWFybmVyU3RhdHVzOiBhc3luYyAoaWQ6IHN0cmluZywgc3RhdHVzOiBzdHJpbmcsIHJlYXNvbj86IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wYXRjaChgL2xlYXJuZXJzLyR7aWR9L3N0YXR1c2AsIHsgc3RhdHVzLCByZWFzb24gfSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgdXBkYXRlTGVhcm5lcktpdDogYXN5bmMgKGlkOiBzdHJpbmcsIGtpdERhdGE6IFBhcnRpYWw8S2l0PikgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQoYC9sZWFybmVycy8ke2lkfS9raXRgLCBraXREYXRhKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBnZXRXYWl0aW5nTGlzdDogYXN5bmMgKHByb21vdGlvbklkPzogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVybCA9IHByb21vdGlvbklkIFxuICAgICAgICA/IGAvbGVhcm5lcnMvd2FpdGluZy1saXN0P3Byb21vdGlvbklkPSR7cHJvbW90aW9uSWR9YFxuICAgICAgICA6ICcvbGVhcm5lcnMvd2FpdGluZy1saXN0JztcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCh1cmwpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIHJlcGxhY2VMZWFybmVyOiBhc3luYyAocmVwbGFjZWRJZDogc3RyaW5nLCByZXBsYWNlbWVudElkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2xlYXJuZXJzL3JlcGxhY2UnLCB7XG4gICAgICAgIHJlcGxhY2VkSWQsXG4gICAgICAgIHJlcGxhY2VtZW50SWQsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0TGVhcm5lckJ5RW1haWw6IGFzeW5jIChlbWFpbDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL2xlYXJuZXJzL2VtYWlsLyR7ZW1haWx9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbGVhcm5lciBieSBlbWFpbDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG59O1xuXG4vLyBNb2R1bGVzIEFQSSBjYWxsc1xuZXhwb3J0IGNvbnN0IG1vZHVsZXNBUEkgPSB7XG4gIGdldEFsbE1vZHVsZXM6IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KCcvbW9kdWxlcycpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGdldE1vZHVsZUJ5SWQ6IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL21vZHVsZXMvJHtpZH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBnZXRBY3RpdmVNb2R1bGVzQnlMZWFybmVyOiBhc3luYyAobGVhcm5lcklkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvbW9kdWxlcy9hY3RpdmUvbGVhcm5lci8ke2xlYXJuZXJJZH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBjcmVhdGVNb2R1bGU6IGFzeW5jIChtb2R1bGVEYXRhOiBQYXJ0aWFsPE1vZHVsZT4pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL21vZHVsZXMnLCBtb2R1bGVEYXRhKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICB1cGRhdGVNb2R1bGU6IGFzeW5jIChpZDogc3RyaW5nLCBtb2R1bGVEYXRhOiBQYXJ0aWFsPE1vZHVsZT4pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucHV0KGAvbW9kdWxlcy8ke2lkfWAsIG1vZHVsZURhdGEpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGRlbGV0ZU1vZHVsZTogYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZGVsZXRlKGAvbW9kdWxlcy8ke2lkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbn07XG5cbi8vIFJlZmVyZW50aWFscyBBUEkgY2FsbHNcbmV4cG9ydCBjb25zdCByZWZlcmVudGlhbHNBUEkgPSB7XG4gIGdldEFsbFJlZmVyZW50aWFsczogYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9yZWZlcmVudGlhbHMnKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBnZXRSZWZlcmVudGlhbEJ5SWQ6IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL3JlZmVyZW50aWFscy8ke2lkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGNyZWF0ZVJlZmVyZW50aWFsOiBhc3luYyAocmVmZXJlbnRpYWxEYXRhOiBQYXJ0aWFsPFJlZmVyZW50aWFsPikgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvcmVmZXJlbnRpYWxzJywgcmVmZXJlbnRpYWxEYXRhKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICB1cGRhdGVSZWZlcmVudGlhbDogYXN5bmMgKGlkOiBzdHJpbmcsIHJlZmVyZW50aWFsRGF0YTogUGFydGlhbDxSZWZlcmVudGlhbD4pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucHV0KGAvcmVmZXJlbnRpYWxzLyR7aWR9YCwgcmVmZXJlbnRpYWxEYXRhKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBkZWxldGVSZWZlcmVudGlhbDogYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZGVsZXRlKGAvcmVmZXJlbnRpYWxzLyR7aWR9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxufTtcblxuLy8gR3JhZGVzIEFQSSBjYWxsc1xuZXhwb3J0IGNvbnN0IGdyYWRlc0FQSSA9IHtcbiAgZ2V0R3JhZGVzQnlMZWFybmVyOiBhc3luYyAobGVhcm5lcklkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvZ3JhZGVzL2xlYXJuZXIvJHtsZWFybmVySWR9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZ2V0R3JhZGVzQnlNb2R1bGU6IGFzeW5jIChtb2R1bGVJZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL2dyYWRlcy9tb2R1bGUvJHttb2R1bGVJZH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBjcmVhdGVHcmFkZTogYXN5bmMgKGdyYWRlRGF0YTogUGFydGlhbDxHcmFkZT4pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2dyYWRlcycsIGdyYWRlRGF0YSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgdXBkYXRlR3JhZGU6IGFzeW5jIChpZDogc3RyaW5nLCBncmFkZURhdGE6IFBhcnRpYWw8R3JhZGU+KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnB1dChgL2dyYWRlcy8ke2lkfWAsIGdyYWRlRGF0YSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZGVsZXRlR3JhZGU6IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmRlbGV0ZShgL2dyYWRlcy8ke2lkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbn07XG5cbi8vIEF0dGVuZGFuY2UgQVBJIGNhbGxzXG5leHBvcnQgY29uc3QgYXR0ZW5kYW5jZUFQSSA9IHtcbiAgZ2V0QXR0ZW5kYW5jZUJ5TGVhcm5lcjogYXN5bmMgKGxlYXJuZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL2F0dGVuZGFuY2UvbGVhcm5lci8ke2xlYXJuZXJJZH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBnZXREYWlseVN0YXRzOiBhc3luYyAoZGF0ZTogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL2F0dGVuZGFuY2Uvc3RhdHMvZGFpbHk/ZGF0ZT0ke2RhdGV9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZ2V0TW9udGhseVN0YXRzOiBhc3luYyAoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL2F0dGVuZGFuY2Uvc3RhdHMvbW9udGhseT95ZWFyPSR7eWVhcn0mbW9udGg9JHttb250aH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0WWVhcmx5U3RhdHM6IGFzeW5jICh5ZWFyOiBudW1iZXIpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvYXR0ZW5kYW5jZS9zdGF0cy95ZWFybHk/eWVhcj0ke3llYXJ9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZ2V0TGF0ZXN0U2NhbnM6IGFzeW5jIChsaW1pdDogbnVtYmVyID0gMTApID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvYXR0ZW5kYW5jZS9zY2Fucy9sYXRlc3Q/bGltaXQ9JHtsaW1pdH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBzY2FuTGVhcm5lcjogYXN5bmMgKHFyQ29kZTogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoJy9hdHRlbmRhbmNlL3NjYW4nLCB7IHFyQ29kZSB9KTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBhcHByb3ZlSnVzdGlmaWNhdGlvbjogYXN5bmMgKGF0dGVuZGFuY2VJZDogc3RyaW5nLCBhcHByb3ZlZDogYm9vbGVhbiwgY29tbWVudD86IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wYXRjaChgL2F0dGVuZGFuY2UvJHthdHRlbmRhbmNlSWR9L2p1c3RpZnlgLCB7IFxuICAgICAgICBzdGF0dXM6IGFwcHJvdmVkID8gJ0FQUFJPVkVEJyA6ICdSRUpFQ1RFRCcsXG4gICAgICAgIGNvbW1lbnRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbn07XG5cbi8vIFByb21vdGlvbnMgQVBJIGNhbGxzXG5leHBvcnQgY29uc3QgcHJvbW90aW9uc0FQSSA9IHtcbiAgZ2V0QWxsUHJvbW90aW9uczogYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9wcm9tb3Rpb25zJyk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZ2V0UHJvbW90aW9uQnlJZDogYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvcHJvbW90aW9ucy8ke2lkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGNyZWF0ZVByb21vdGlvbjogYXN5bmMgKHByb21vdGlvbkRhdGE6IFBhcnRpYWw8UHJvbW90aW9uPikgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvcHJvbW90aW9ucycsIHByb21vdGlvbkRhdGEpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufTtcblxuLy8gQ29hY2hlcyBBUEkgY2FsbHNcbmV4cG9ydCBjb25zdCBjb2FjaGVzQVBJID0ge1xuICBnZXRDb2FjaEJ5RW1haWw6IGFzeW5jIChlbWFpbDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL2NvYWNoZXMvZW1haWwvJHtlbWFpbH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBjb2FjaCBieSBlbWFpbDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG59O1xuXG4vLyBVc2VycyBBUEkgY2FsbHNcbmV4cG9ydCBjb25zdCB1c2Vyc0FQSSA9IHtcbiAgZ2V0VXNlckJ5RW1haWw6IGFzeW5jIChlbWFpbDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL3VzZXJzL2VtYWlsLyR7ZW1haWx9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciBieSBlbWFpbDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0VXNlckJ5SWQ6IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL3VzZXJzLyR7aWR9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciBieSBpZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0VXNlckRldGFpbHNXaXRoUGhvdG86IGFzeW5jIChlbWFpbDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBhcGkuZ2V0KGAvdXNlcnMvZW1haWwvJHtlbWFpbH1gKTtcbiAgICAgIGlmICghdXNlci5kYXRhKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gR2V0IHNwZWNpZmljIHJvbGUgZGV0YWlscyBiYXNlZCBvbiB1c2VyJ3Mgcm9sZVxuICAgICAgbGV0IGRldGFpbHMgPSBudWxsO1xuICAgICAgc3dpdGNoICh1c2VyLmRhdGEucm9sZSkge1xuICAgICAgICBjYXNlICdBUFBSRU5BTlQnOlxuICAgICAgICAgIGRldGFpbHMgPSBhd2FpdCBsZWFybmVyc0FQSS5nZXRMZWFybmVyQnlFbWFpbChlbWFpbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0NPQUNIJzpcbiAgICAgICAgICBkZXRhaWxzID0gYXdhaXQgY29hY2hlc0FQSS5nZXRDb2FjaEJ5RW1haWwoZW1haWwpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBBZGQgb3RoZXIgcm9sZXMgYXMgbmVlZGVkXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnVzZXIuZGF0YSxcbiAgICAgICAgZGV0YWlscyxcbiAgICAgICAgcGhvdG9Vcmw6IGRldGFpbHM/LnBob3RvVXJsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB1c2VyIGRldGFpbHM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhcGk7Il0sIm5hbWVzIjpbImF4aW9zIiwiYXBpIiwiY3JlYXRlIiwiYmFzZVVSTCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwiaGVhZGVycyIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJ1c2UiLCJjb25maWciLCJ0b2tlbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJBdXRob3JpemF0aW9uIiwiZXJyb3IiLCJQcm9taXNlIiwicmVqZWN0IiwicmVzcG9uc2UiLCJzdGF0dXMiLCJyZW1vdmVJdGVtIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwiYXV0aEFQSSIsImxvZ2luIiwiZW1haWwiLCJwYXNzd29yZCIsImNvbnNvbGUiLCJsb2ciLCJwb3N0IiwiZGF0YSIsIkVycm9yIiwibGVhcm5lcnNBUEkiLCJnZXRBbGxMZWFybmVycyIsImdldCIsImdldExlYXJuZXJCeUlkIiwiaWQiLCJnZXRMZWFybmVyQXR0ZW5kYW5jZVN0YXRzIiwiZ2V0R2VuZGVyRGlzdHJpYnV0aW9uIiwidXBkYXRlTGVhcm5lclN0YXR1cyIsInJlYXNvbiIsInBhdGNoIiwidXBkYXRlTGVhcm5lcktpdCIsImtpdERhdGEiLCJwdXQiLCJnZXRXYWl0aW5nTGlzdCIsInByb21vdGlvbklkIiwidXJsIiwicmVwbGFjZUxlYXJuZXIiLCJyZXBsYWNlZElkIiwicmVwbGFjZW1lbnRJZCIsImdldExlYXJuZXJCeUVtYWlsIiwibW9kdWxlc0FQSSIsImdldEFsbE1vZHVsZXMiLCJnZXRNb2R1bGVCeUlkIiwiZ2V0QWN0aXZlTW9kdWxlc0J5TGVhcm5lciIsImxlYXJuZXJJZCIsImNyZWF0ZU1vZHVsZSIsIm1vZHVsZURhdGEiLCJ1cGRhdGVNb2R1bGUiLCJkZWxldGVNb2R1bGUiLCJkZWxldGUiLCJyZWZlcmVudGlhbHNBUEkiLCJnZXRBbGxSZWZlcmVudGlhbHMiLCJnZXRSZWZlcmVudGlhbEJ5SWQiLCJjcmVhdGVSZWZlcmVudGlhbCIsInJlZmVyZW50aWFsRGF0YSIsInVwZGF0ZVJlZmVyZW50aWFsIiwiZGVsZXRlUmVmZXJlbnRpYWwiLCJncmFkZXNBUEkiLCJnZXRHcmFkZXNCeUxlYXJuZXIiLCJnZXRHcmFkZXNCeU1vZHVsZSIsIm1vZHVsZUlkIiwiY3JlYXRlR3JhZGUiLCJncmFkZURhdGEiLCJ1cGRhdGVHcmFkZSIsImRlbGV0ZUdyYWRlIiwiYXR0ZW5kYW5jZUFQSSIsImdldEF0dGVuZGFuY2VCeUxlYXJuZXIiLCJnZXREYWlseVN0YXRzIiwiZGF0ZSIsImdldE1vbnRobHlTdGF0cyIsInllYXIiLCJtb250aCIsImdldFllYXJseVN0YXRzIiwiZ2V0TGF0ZXN0U2NhbnMiLCJsaW1pdCIsInNjYW5MZWFybmVyIiwicXJDb2RlIiwiYXBwcm92ZUp1c3RpZmljYXRpb24iLCJhdHRlbmRhbmNlSWQiLCJhcHByb3ZlZCIsImNvbW1lbnQiLCJwcm9tb3Rpb25zQVBJIiwiZ2V0QWxsUHJvbW90aW9ucyIsImdldFByb21vdGlvbkJ5SWQiLCJjcmVhdGVQcm9tb3Rpb24iLCJwcm9tb3Rpb25EYXRhIiwiY29hY2hlc0FQSSIsImdldENvYWNoQnlFbWFpbCIsInVzZXJzQVBJIiwiZ2V0VXNlckJ5RW1haWwiLCJnZXRVc2VyQnlJZCIsImdldFVzZXJEZXRhaWxzV2l0aFBob3RvIiwidXNlciIsImRldGFpbHMiLCJyb2xlIiwicGhvdG9VcmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});