"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attendanceAPI: function() { return /* binding */ attendanceAPI; },\n/* harmony export */   authAPI: function() { return /* binding */ authAPI; },\n/* harmony export */   coachesAPI: function() { return /* binding */ coachesAPI; },\n/* harmony export */   gradesAPI: function() { return /* binding */ gradesAPI; },\n/* harmony export */   learnersAPI: function() { return /* binding */ learnersAPI; },\n/* harmony export */   modulesAPI: function() { return /* binding */ modulesAPI; },\n/* harmony export */   promotionsAPI: function() { return /* binding */ promotionsAPI; },\n/* harmony export */   referentialsAPI: function() { return /* binding */ referentialsAPI; },\n/* harmony export */   usersAPI: function() { return /* binding */ usersAPI; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n// Create an Axios instance with base URL and default headers\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"http://localhost:3000\" || 0,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Add auth token to requests\napi.interceptors.request.use((config)=>{\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    }\n    return config;\n});\n// Add a response interceptor to handle common errors\napi.interceptors.response.use((response)=>response, (error)=>{\n    // Handle authentication errors\n    if (error.response && error.response.status === 401) {\n        // If we're in the browser, clear the token and redirect to login\n        if (true) {\n            localStorage.removeItem(\"accessToken\");\n            localStorage.removeItem(\"user\");\n            window.location.href = \"/\";\n        }\n    }\n    return Promise.reject(error);\n});\n// Auth API calls\nconst authAPI = {\n    login: async (email, password)=>{\n        try {\n            console.log(\"API call: Attempting login with:\", {\n                email\n            });\n            console.log(\"API URL being used:\", \"http://localhost:3000\" || 0);\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/api/auth/login\", {\n                email,\n                password\n            });\n            console.log(\"API response received:\", response.status);\n            if (response.data && response.status === 200) {\n                return response.data;\n            } else {\n                console.error(\"Unexpected API response format:\", response);\n                throw new Error(\"Invalid response format from server\");\n            }\n        } catch (error) {\n            console.error(\"Login API error:\", error);\n            throw error;\n        }\n    }\n};\n// Learners API calls\nconst learnersAPI = {\n    getAllLearners: async ()=>{\n        try {\n            const response = await api.get(\"/learners\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLearnerById: async (id)=>{\n        try {\n            const response = await api.get(\"/learners/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLearnerAttendanceStats: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/learners/\".concat(learnerId, \"/attendance-stats\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching attendance stats:\", error);\n            return null;\n        }\n    },\n    getGenderDistribution: async ()=>{\n        try {\n            const response = await api.get(\"/learners/stats/gender\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateLearnerStatus: async (id, status, reason)=>{\n        try {\n            const response = await api.patch(\"/learners/\".concat(id, \"/status\"), {\n                status,\n                reason\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateLearnerKit: async (id, kitData)=>{\n        try {\n            const response = await api.put(\"/learners/\".concat(id, \"/kit\"), kitData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getWaitingList: async (promotionId)=>{\n        try {\n            const url = promotionId ? \"/learners/waiting-list?promotionId=\".concat(promotionId) : \"/learners/waiting-list\";\n            const response = await api.get(url);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    replaceLearner: async (replacedId, replacementId)=>{\n        try {\n            const response = await api.post(\"/learners/replace\", {\n                replacedId,\n                replacementId\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLearnerByEmail: async (email)=>{\n        try {\n            const response = await api.get(\"/learners/email/\".concat(email));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching learner by email:\", error);\n            return null;\n        }\n    }\n};\n// Modules API calls\nconst modulesAPI = {\n    getAllModules: async ()=>{\n        try {\n            const response = await api.get(\"/modules\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getModuleById: async (id)=>{\n        try {\n            const response = await api.get(\"/modules/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getActiveModulesByLearner: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/modules/active/learner/\".concat(learnerId));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching modules:\", error);\n            return [];\n        }\n    },\n    createModule: async (moduleData)=>{\n        try {\n            const response = await api.post(\"/modules\", moduleData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateModule: async (id, moduleData)=>{\n        try {\n            const response = await api.put(\"/modules/\".concat(id), moduleData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    deleteModule: async (id)=>{\n        try {\n            const response = await api.delete(\"/modules/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Referentials API calls\nconst referentialsAPI = {\n    getAllReferentials: async ()=>{\n        try {\n            const response = await api.get(\"/referentials\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getReferentialById: async (id)=>{\n        try {\n            const response = await api.get(\"/referentials/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createReferential: async (referentialData)=>{\n        try {\n            const response = await api.post(\"/referentials\", referentialData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateReferential: async (id, referentialData)=>{\n        try {\n            const response = await api.put(\"/referentials/\".concat(id), referentialData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    deleteReferential: async (id)=>{\n        try {\n            const response = await api.delete(\"/referentials/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Grades API calls\nconst gradesAPI = {\n    getGradesByLearner: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/grades/learner/\".concat(learnerId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getGradesByModule: async (moduleId)=>{\n        try {\n            const response = await api.get(\"/grades/module/\".concat(moduleId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createGrade: async (gradeData)=>{\n        try {\n            const response = await api.post(\"/grades\", gradeData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    updateGrade: async (id, gradeData)=>{\n        try {\n            const response = await api.put(\"/grades/\".concat(id), gradeData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    deleteGrade: async (id)=>{\n        try {\n            const response = await api.delete(\"/grades/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Attendance API calls\nconst attendanceAPI = {\n    getAttendanceByLearner: async (learnerId)=>{\n        try {\n            const response = await api.get(\"/attendance/learner/\".concat(learnerId));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getDailyStats: async (date)=>{\n        try {\n            const response = await api.get(\"/attendance/stats/daily?date=\".concat(date));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getMonthlyStats: async (year, month)=>{\n        try {\n            const response = await api.get(\"/attendance/stats/monthly?year=\".concat(year, \"&month=\").concat(month));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getYearlyStats: async (year)=>{\n        try {\n            const response = await api.get(\"/attendance/stats/yearly?year=\".concat(year));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getLatestScans: async function() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        try {\n            const response = await api.get(\"/attendance/scans/latest?limit=\".concat(limit));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    scanLearner: async (qrCode)=>{\n        try {\n            const response = await api.post(\"/attendance/scan\", {\n                qrCode\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    approveJustification: async (attendanceId, approved, comment)=>{\n        try {\n            const response = await api.patch(\"/attendance/\".concat(attendanceId, \"/justify\"), {\n                status: approved ? \"APPROVED\" : \"REJECTED\",\n                comment\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Promotions API calls\nconst promotionsAPI = {\n    getAllPromotions: async ()=>{\n        try {\n            const response = await api.get(\"/promotions\");\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    getPromotionById: async (id)=>{\n        try {\n            const response = await api.get(\"/promotions/\".concat(id));\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    createPromotion: async (promotionData)=>{\n        try {\n            const response = await api.post(\"/promotions\", promotionData);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n// Coaches API calls\nconst coachesAPI = {\n    getCoachByEmail: async (email)=>{\n        try {\n            const response = await api.get(\"/coaches/email/\".concat(email));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching coach by email:\", error);\n            return null;\n        }\n    }\n};\n// Users API calls\nconst usersAPI = {\n    getUserByEmail: async (email)=>{\n        try {\n            const response = await api.get(\"/users/email/\".concat(email));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching user by email:\", error);\n            return null;\n        }\n    },\n    getUserById: async (id)=>{\n        try {\n            const response = await api.get(\"/users/\".concat(id));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching user by id:\", error);\n            return null;\n        }\n    },\n    getUserDetailsWithPhoto: async (email)=>{\n        try {\n            const response = await api.get(\"/users/email/\".concat(email));\n            const user = response.data;\n            if (!user || !user.details) {\n                console.log(\"No user details found for:\", email);\n                return null;\n            }\n            // Get photo URL based on role\n            let photoUrl = null;\n            if (user.details) {\n                photoUrl = user.details.photoUrl;\n            }\n            return {\n                ...user,\n                photoUrl\n            };\n        } catch (error) {\n            console.error(\"Error fetching user details:\", error);\n            return null;\n        }\n    },\n    getUserPhoto: async (email)=>{\n        try {\n            const token = localStorage.getItem(\"token\"); // Make sure to include the JWT token\n            const response = await api.get(\"/users/photo/\".concat(email), {\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                }\n            });\n            return response.data.photoUrl;\n        } catch (error) {\n            console.error(\"Error fetching user photo:\", error);\n            return null;\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hcGkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUEwQjtBQUcxQiw2REFBNkQ7QUFDN0QsTUFBTUMsTUFBTUQsNkNBQUtBLENBQUNFLE1BQU0sQ0FBQztJQUN2QkMsU0FBU0MsdUJBQStCLElBQUk7SUFDNUNHLFNBQVM7UUFDUCxnQkFBZ0I7SUFDbEI7QUFDRjtBQUVBLDZCQUE2QjtBQUM3Qk4sSUFBSU8sWUFBWSxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFDQztJQUM1QixNQUFNQyxRQUFRQyxhQUFhQyxPQUFPLENBQUM7SUFDbkMsSUFBSUYsT0FBTztRQUNURCxPQUFPSixPQUFPLENBQUNRLGFBQWEsR0FBRyxVQUFnQixPQUFOSDtJQUMzQztJQUNBLE9BQU9EO0FBQ1Q7QUFFQSxxREFBcUQ7QUFDckRWLElBQUlPLFlBQVksQ0FBQ1EsUUFBUSxDQUFDTixHQUFHLENBQzNCLENBQUNNLFdBQWFBLFVBQ2QsQ0FBQ0M7SUFDQywrQkFBK0I7SUFDL0IsSUFBSUEsTUFBTUQsUUFBUSxJQUFJQyxNQUFNRCxRQUFRLENBQUNFLE1BQU0sS0FBSyxLQUFLO1FBQ25ELGlFQUFpRTtRQUNqRSxJQUFJLElBQWtCLEVBQWE7WUFDakNMLGFBQWFNLFVBQVUsQ0FBQztZQUN4Qk4sYUFBYU0sVUFBVSxDQUFDO1lBQ3hCQyxPQUFPQyxRQUFRLENBQUNDLElBQUksR0FBRztRQUN6QjtJQUNGO0lBQ0EsT0FBT0MsUUFBUUMsTUFBTSxDQUFDUDtBQUN4QjtBQUdGLGlCQUFpQjtBQUNWLE1BQU1RLFVBQVU7SUFDckJDLE9BQU8sT0FBT0MsT0FBZUM7UUFDM0IsSUFBSTtZQUNGQyxRQUFRQyxHQUFHLENBQUMsb0NBQW9DO2dCQUFFSDtZQUFNO1lBQ3hERSxRQUFRQyxHQUFHLENBQUMsdUJBQXVCMUIsdUJBQStCLElBQUk7WUFFdEUsTUFBTVksV0FBVyxNQUFNaEIsNkNBQUtBLENBQUMrQixJQUFJLENBQUMsbUJBQW1CO2dCQUFFSjtnQkFBT0M7WUFBUztZQUN2RUMsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQmQsU0FBU0UsTUFBTTtZQUVyRCxJQUFJRixTQUFTZ0IsSUFBSSxJQUFJaEIsU0FBU0UsTUFBTSxLQUFLLEtBQUs7Z0JBQzVDLE9BQU9GLFNBQVNnQixJQUFJO1lBQ3RCLE9BQU87Z0JBQ0xILFFBQVFaLEtBQUssQ0FBQyxtQ0FBbUNEO2dCQUNqRCxNQUFNLElBQUlpQixNQUFNO1lBQ2xCO1FBQ0YsRUFBRSxPQUFPaEIsT0FBTztZQUNkWSxRQUFRWixLQUFLLENBQUMsb0JBQW9CQTtZQUNsQyxNQUFNQTtRQUNSO0lBQ0Y7QUFDRixFQUFFO0FBMkdGLHFCQUFxQjtBQUNkLE1BQU1pQixjQUFjO0lBQ3pCQyxnQkFBZ0I7UUFDZCxJQUFJO1lBQ0YsTUFBTW5CLFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQztZQUMvQixPQUFPcEIsU0FBU2dCLElBQUk7UUFDdEIsRUFBRSxPQUFPZixPQUFPO1lBQ2QsTUFBTUE7UUFDUjtJQUNGO0lBRUFvQixnQkFBZ0IsT0FBT0M7UUFDckIsSUFBSTtZQUNGLE1BQU10QixXQUFXLE1BQU1mLElBQUltQyxHQUFHLENBQUMsYUFBZ0IsT0FBSEU7WUFDNUMsT0FBT3RCLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBc0IsMkJBQTJCLE9BQU9DO1FBQ2hDLElBQUk7WUFDRixNQUFNeEIsV0FBVyxNQUFNZixJQUFJbUMsR0FBRyxDQUFDLGFBQXVCLE9BQVZJLFdBQVU7WUFDdEQsT0FBT3hCLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkWSxRQUFRWixLQUFLLENBQUMsb0NBQW9DQTtZQUNsRCxPQUFPO1FBQ1Q7SUFDRjtJQUVBd0IsdUJBQXVCO1FBQ3JCLElBQUk7WUFDRixNQUFNekIsV0FBVyxNQUFNZixJQUFJbUMsR0FBRyxDQUFDO1lBQy9CLE9BQU9wQixTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQXlCLHFCQUFxQixPQUFPSixJQUFZcEIsUUFBZ0J5QjtRQUN0RCxJQUFJO1lBQ0YsTUFBTTNCLFdBQVcsTUFBTWYsSUFBSTJDLEtBQUssQ0FBQyxhQUFnQixPQUFITixJQUFHLFlBQVU7Z0JBQUVwQjtnQkFBUXlCO1lBQU87WUFDNUUsT0FBTzNCLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBNEIsa0JBQWtCLE9BQU9QLElBQVlRO1FBQ25DLElBQUk7WUFDRixNQUFNOUIsV0FBVyxNQUFNZixJQUFJOEMsR0FBRyxDQUFDLGFBQWdCLE9BQUhULElBQUcsU0FBT1E7WUFDdEQsT0FBTzlCLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBK0IsZ0JBQWdCLE9BQU9DO1FBQ3JCLElBQUk7WUFDRixNQUFNQyxNQUFNRCxjQUNSLHNDQUFrRCxPQUFaQSxlQUN0QztZQUNKLE1BQU1qQyxXQUFXLE1BQU1mLElBQUltQyxHQUFHLENBQUNjO1lBQy9CLE9BQU9sQyxTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQWtDLGdCQUFnQixPQUFPQyxZQUFvQkM7UUFDekMsSUFBSTtZQUNGLE1BQU1yQyxXQUFXLE1BQU1mLElBQUk4QixJQUFJLENBQUMscUJBQXFCO2dCQUNuRHFCO2dCQUNBQztZQUNGO1lBQ0EsT0FBT3JDLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBcUMsbUJBQW1CLE9BQU8zQjtRQUN4QixJQUFJO1lBQ0YsTUFBTVgsV0FBVyxNQUFNZixJQUFJbUMsR0FBRyxDQUFDLG1CQUF5QixPQUFOVDtZQUNsRCxPQUFPWCxTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZFksUUFBUVosS0FBSyxDQUFDLG9DQUFvQ0E7WUFDbEQsT0FBTztRQUNUO0lBQ0Y7QUFDRixFQUFFO0FBRUYsb0JBQW9CO0FBQ2IsTUFBTXNDLGFBQWE7SUFDeEJDLGVBQWU7UUFDYixJQUFJO1lBQ0YsTUFBTXhDLFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQztZQUMvQixPQUFPcEIsU0FBU2dCLElBQUk7UUFDdEIsRUFBRSxPQUFPZixPQUFPO1lBQ2QsTUFBTUE7UUFDUjtJQUNGO0lBRUF3QyxlQUFlLE9BQU9uQjtRQUNwQixJQUFJO1lBQ0YsTUFBTXRCLFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQyxZQUFlLE9BQUhFO1lBQzNDLE9BQU90QixTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQXlDLDJCQUEyQixPQUFPbEI7UUFDaEMsSUFBSTtZQUNGLE1BQU14QixXQUFXLE1BQU1mLElBQUltQyxHQUFHLENBQUMsMkJBQXFDLE9BQVZJO1lBQzFELE9BQU94QixTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZFksUUFBUVosS0FBSyxDQUFDLDJCQUEyQkE7WUFDekMsT0FBTyxFQUFFO1FBQ1g7SUFDRjtJQUVBMEMsY0FBYyxPQUFPQztRQUNuQixJQUFJO1lBQ0YsTUFBTTVDLFdBQVcsTUFBTWYsSUFBSThCLElBQUksQ0FBQyxZQUFZNkI7WUFDNUMsT0FBTzVDLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBNEMsY0FBYyxPQUFPdkIsSUFBWXNCO1FBQy9CLElBQUk7WUFDRixNQUFNNUMsV0FBVyxNQUFNZixJQUFJOEMsR0FBRyxDQUFDLFlBQWUsT0FBSFQsS0FBTXNCO1lBQ2pELE9BQU81QyxTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQTZDLGNBQWMsT0FBT3hCO1FBQ25CLElBQUk7WUFDRixNQUFNdEIsV0FBVyxNQUFNZixJQUFJOEQsTUFBTSxDQUFDLFlBQWUsT0FBSHpCO1lBQzlDLE9BQU90QixTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7QUFDRixFQUFFO0FBRUYseUJBQXlCO0FBQ2xCLE1BQU0rQyxrQkFBa0I7SUFDN0JDLG9CQUFvQjtRQUNsQixJQUFJO1lBQ0YsTUFBTWpELFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQztZQUMvQixPQUFPcEIsU0FBU2dCLElBQUk7UUFDdEIsRUFBRSxPQUFPZixPQUFPO1lBQ2QsTUFBTUE7UUFDUjtJQUNGO0lBRUFpRCxvQkFBb0IsT0FBTzVCO1FBQ3pCLElBQUk7WUFDRixNQUFNdEIsV0FBVyxNQUFNZixJQUFJbUMsR0FBRyxDQUFDLGlCQUFvQixPQUFIRTtZQUNoRCxPQUFPdEIsU0FBU2dCLElBQUk7UUFDdEIsRUFBRSxPQUFPZixPQUFPO1lBQ2QsTUFBTUE7UUFDUjtJQUNGO0lBRUFrRCxtQkFBbUIsT0FBT0M7UUFDeEIsSUFBSTtZQUNGLE1BQU1wRCxXQUFXLE1BQU1mLElBQUk4QixJQUFJLENBQUMsaUJBQWlCcUM7WUFDakQsT0FBT3BELFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBb0QsbUJBQW1CLE9BQU8vQixJQUFZOEI7UUFDcEMsSUFBSTtZQUNGLE1BQU1wRCxXQUFXLE1BQU1mLElBQUk4QyxHQUFHLENBQUMsaUJBQW9CLE9BQUhULEtBQU04QjtZQUN0RCxPQUFPcEQsU0FBU2dCLElBQUk7UUFDdEIsRUFBRSxPQUFPZixPQUFPO1lBQ2QsTUFBTUE7UUFDUjtJQUNGO0lBRUFxRCxtQkFBbUIsT0FBT2hDO1FBQ3hCLElBQUk7WUFDRixNQUFNdEIsV0FBVyxNQUFNZixJQUFJOEQsTUFBTSxDQUFDLGlCQUFvQixPQUFIekI7WUFDbkQsT0FBT3RCLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtBQUNGLEVBQUU7QUFFRixtQkFBbUI7QUFDWixNQUFNc0QsWUFBWTtJQUN2QkMsb0JBQW9CLE9BQU9oQztRQUN6QixJQUFJO1lBQ0YsTUFBTXhCLFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQyxtQkFBNkIsT0FBVkk7WUFDbEQsT0FBT3hCLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBd0QsbUJBQW1CLE9BQU9DO1FBQ3hCLElBQUk7WUFDRixNQUFNMUQsV0FBVyxNQUFNZixJQUFJbUMsR0FBRyxDQUFDLGtCQUEyQixPQUFUc0M7WUFDakQsT0FBTzFELFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBMEQsYUFBYSxPQUFPQztRQUNsQixJQUFJO1lBQ0YsTUFBTTVELFdBQVcsTUFBTWYsSUFBSThCLElBQUksQ0FBQyxXQUFXNkM7WUFDM0MsT0FBTzVELFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBNEQsYUFBYSxPQUFPdkMsSUFBWXNDO1FBQzlCLElBQUk7WUFDRixNQUFNNUQsV0FBVyxNQUFNZixJQUFJOEMsR0FBRyxDQUFDLFdBQWMsT0FBSFQsS0FBTXNDO1lBQ2hELE9BQU81RCxTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQTZELGFBQWEsT0FBT3hDO1FBQ2xCLElBQUk7WUFDRixNQUFNdEIsV0FBVyxNQUFNZixJQUFJOEQsTUFBTSxDQUFDLFdBQWMsT0FBSHpCO1lBQzdDLE9BQU90QixTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7QUFDRixFQUFFO0FBRUYsdUJBQXVCO0FBQ2hCLE1BQU04RCxnQkFBZ0I7SUFDM0JDLHdCQUF3QixPQUFPeEM7UUFDN0IsSUFBSTtZQUNGLE1BQU14QixXQUFXLE1BQU1mLElBQUltQyxHQUFHLENBQUMsdUJBQWlDLE9BQVZJO1lBQ3RELE9BQU94QixTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQWdFLGVBQWUsT0FBT0M7UUFDcEIsSUFBSTtZQUNGLE1BQU1sRSxXQUFXLE1BQU1mLElBQUltQyxHQUFHLENBQUMsZ0NBQXFDLE9BQUw4QztZQUMvRCxPQUFPbEUsU0FBU2dCLElBQUk7UUFDdEIsRUFBRSxPQUFPZixPQUFPO1lBQ2QsTUFBTUE7UUFDUjtJQUNGO0lBRUFrRSxpQkFBaUIsT0FBT0MsTUFBY0M7UUFDcEMsSUFBSTtZQUNGLE1BQU1yRSxXQUFXLE1BQU1mLElBQUltQyxHQUFHLENBQUMsa0NBQWdEaUQsT0FBZEQsTUFBSyxXQUFlLE9BQU5DO1lBQy9FLE9BQU9yRSxTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQXFFLGdCQUFnQixPQUFPRjtRQUNyQixJQUFJO1lBQ0YsTUFBTXBFLFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQyxpQ0FBc0MsT0FBTGdEO1lBQ2hFLE9BQU9wRSxTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQXNFLGdCQUFnQjtZQUFPQyx5RUFBZ0I7UUFDckMsSUFBSTtZQUNGLE1BQU14RSxXQUFXLE1BQU1mLElBQUltQyxHQUFHLENBQUMsa0NBQXdDLE9BQU5vRDtZQUNqRSxPQUFPeEUsU0FBU2dCLElBQUk7UUFDdEIsRUFBRSxPQUFPZixPQUFPO1lBQ2QsTUFBTUE7UUFDUjtJQUNGO0lBRUF3RSxhQUFhLE9BQU9DO1FBQ2xCLElBQUk7WUFDRixNQUFNMUUsV0FBVyxNQUFNZixJQUFJOEIsSUFBSSxDQUFDLG9CQUFvQjtnQkFBRTJEO1lBQU87WUFDN0QsT0FBTzFFLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtJQUVBMEUsc0JBQXNCLE9BQU9DLGNBQXNCQyxVQUFtQkM7UUFDcEUsSUFBSTtZQUNGLE1BQU05RSxXQUFXLE1BQU1mLElBQUkyQyxLQUFLLENBQUMsZUFBNEIsT0FBYmdELGNBQWEsYUFBVztnQkFDdEUxRSxRQUFRMkUsV0FBVyxhQUFhO2dCQUNoQ0M7WUFDRjtZQUNBLE9BQU85RSxTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7QUFDRixFQUFFO0FBRUYsdUJBQXVCO0FBQ2hCLE1BQU04RSxnQkFBZ0I7SUFDM0JDLGtCQUFrQjtRQUNoQixJQUFJO1lBQ0YsTUFBTWhGLFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQztZQUMvQixPQUFPcEIsU0FBU2dCLElBQUk7UUFDdEIsRUFBRSxPQUFPZixPQUFPO1lBQ2QsTUFBTUE7UUFDUjtJQUNGO0lBRUFnRixrQkFBa0IsT0FBTzNEO1FBQ3ZCLElBQUk7WUFDRixNQUFNdEIsV0FBVyxNQUFNZixJQUFJbUMsR0FBRyxDQUFDLGVBQWtCLE9BQUhFO1lBQzlDLE9BQU90QixTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQWlGLGlCQUFpQixPQUFPQztRQUN0QixJQUFJO1lBQ0YsTUFBTW5GLFdBQVcsTUFBTWYsSUFBSThCLElBQUksQ0FBQyxlQUFlb0U7WUFDL0MsT0FBT25GLFNBQVNnQixJQUFJO1FBQ3RCLEVBQUUsT0FBT2YsT0FBTztZQUNkLE1BQU1BO1FBQ1I7SUFDRjtBQUNGLEVBQUU7QUFFRixvQkFBb0I7QUFDYixNQUFNbUYsYUFBYTtJQUN4QkMsaUJBQWlCLE9BQU8xRTtRQUN0QixJQUFJO1lBQ0YsTUFBTVgsV0FBVyxNQUFNZixJQUFJbUMsR0FBRyxDQUFDLGtCQUF3QixPQUFOVDtZQUNqRCxPQUFPWCxTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZFksUUFBUVosS0FBSyxDQUFDLGtDQUFrQ0E7WUFDaEQsT0FBTztRQUNUO0lBQ0Y7QUFDRixFQUFFO0FBRUYsa0JBQWtCO0FBQ1gsTUFBTXFGLFdBQVc7SUFDdEJDLGdCQUFnQixPQUFPNUU7UUFDckIsSUFBSTtZQUNGLE1BQU1YLFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQyxnQkFBc0IsT0FBTlQ7WUFDL0MsT0FBT1gsU0FBU2dCLElBQUk7UUFDdEIsRUFBRSxPQUFPZixPQUFPO1lBQ2RZLFFBQVFaLEtBQUssQ0FBQyxpQ0FBaUNBO1lBQy9DLE9BQU87UUFDVDtJQUNGO0lBRUF1RixhQUFhLE9BQU9sRTtRQUNsQixJQUFJO1lBQ0YsTUFBTXRCLFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQyxVQUFhLE9BQUhFO1lBQ3pDLE9BQU90QixTQUFTZ0IsSUFBSTtRQUN0QixFQUFFLE9BQU9mLE9BQU87WUFDZFksUUFBUVosS0FBSyxDQUFDLDhCQUE4QkE7WUFDNUMsT0FBTztRQUNUO0lBQ0Y7SUFFQXdGLHlCQUF5QixPQUFPOUU7UUFDOUIsSUFBSTtZQUNGLE1BQU1YLFdBQVcsTUFBTWYsSUFBSW1DLEdBQUcsQ0FBQyxnQkFBc0IsT0FBTlQ7WUFDL0MsTUFBTStFLE9BQU8xRixTQUFTZ0IsSUFBSTtZQUUxQixJQUFJLENBQUMwRSxRQUFRLENBQUNBLEtBQUtDLE9BQU8sRUFBRTtnQkFDMUI5RSxRQUFRQyxHQUFHLENBQUMsOEJBQThCSDtnQkFDMUMsT0FBTztZQUNUO1lBRUEsOEJBQThCO1lBQzlCLElBQUlpRixXQUFXO1lBQ2YsSUFBSUYsS0FBS0MsT0FBTyxFQUFFO2dCQUNoQkMsV0FBV0YsS0FBS0MsT0FBTyxDQUFDQyxRQUFRO1lBQ2xDO1lBRUEsT0FBTztnQkFDTCxHQUFHRixJQUFJO2dCQUNQRTtZQUNGO1FBQ0YsRUFBRSxPQUFPM0YsT0FBTztZQUNkWSxRQUFRWixLQUFLLENBQUMsZ0NBQWdDQTtZQUM5QyxPQUFPO1FBQ1Q7SUFDRjtJQUVBNEYsY0FBYyxPQUFPbEY7UUFDbkIsSUFBSTtZQUNGLE1BQU1mLFFBQVFDLGFBQWFDLE9BQU8sQ0FBQyxVQUFVLHFDQUFxQztZQUNsRixNQUFNRSxXQUFXLE1BQU1mLElBQUltQyxHQUFHLENBQUMsZ0JBQXNCLE9BQU5ULFFBQVM7Z0JBQ3REcEIsU0FBUztvQkFDUFEsZUFBZSxVQUFnQixPQUFOSDtnQkFDM0I7WUFDRjtZQUNBLE9BQU9JLFNBQVNnQixJQUFJLENBQUM0RSxRQUFRO1FBQy9CLEVBQUUsT0FBTzNGLE9BQU87WUFDZFksUUFBUVosS0FBSyxDQUFDLDhCQUE4QkE7WUFDNUMsT0FBTztRQUNUO0lBQ0Y7QUFDRixFQUFFO0FBRUYsK0RBQWVoQixHQUFHQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9hcGkudHM/NjhhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBDcmVhdGUgYW4gQXhpb3MgaW5zdGFuY2Ugd2l0aCBiYXNlIFVSTCBhbmQgZGVmYXVsdCBoZWFkZXJzXG5jb25zdCBhcGkgPSBheGlvcy5jcmVhdGUoe1xuICBiYXNlVVJMOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnLFxuICBoZWFkZXJzOiB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgfSxcbn0pO1xuXG4vLyBBZGQgYXV0aCB0b2tlbiB0byByZXF1ZXN0c1xuYXBpLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZSgoY29uZmlnKSA9PiB7XG4gIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG4gIGlmICh0b2tlbikge1xuICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSBgQmVhcmVyICR7dG9rZW59YDtcbiAgfVxuICByZXR1cm4gY29uZmlnO1xufSk7XG5cbi8vIEFkZCBhIHJlc3BvbnNlIGludGVyY2VwdG9yIHRvIGhhbmRsZSBjb21tb24gZXJyb3JzXG5hcGkuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcbiAgKHJlc3BvbnNlKSA9PiByZXNwb25zZSxcbiAgKGVycm9yKSA9PiB7XG4gICAgLy8gSGFuZGxlIGF1dGhlbnRpY2F0aW9uIGVycm9yc1xuICAgIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgLy8gSWYgd2UncmUgaW4gdGhlIGJyb3dzZXIsIGNsZWFyIHRoZSB0b2tlbiBhbmQgcmVkaXJlY3QgdG8gbG9naW5cbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnYWNjZXNzVG9rZW4nKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXInKTtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLyc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cbik7XG5cbi8vIEF1dGggQVBJIGNhbGxzXG5leHBvcnQgY29uc3QgYXV0aEFQSSA9IHtcbiAgbG9naW46IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdBUEkgY2FsbDogQXR0ZW1wdGluZyBsb2dpbiB3aXRoOicsIHsgZW1haWwgfSk7XG4gICAgICBjb25zb2xlLmxvZygnQVBJIFVSTCBiZWluZyB1c2VkOicsIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCcpO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoJy9hcGkvYXV0aC9sb2dpbicsIHsgZW1haWwsIHBhc3N3b3JkIH0pO1xuICAgICAgY29uc29sZS5sb2coJ0FQSSByZXNwb25zZSByZWNlaXZlZDonLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgQVBJIHJlc3BvbnNlIGZvcm1hdDonLCByZXNwb25zZSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZXNwb25zZSBmb3JtYXQgZnJvbSBzZXJ2ZXInKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignTG9naW4gQVBJIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbn07XG5cbi8vIFR5cGVzIGJhc2VkIG9uIGRhdGFiYXNlIHNjaGVtYVxuZXhwb3J0IGludGVyZmFjZSBVc2VyIHtcbiAgaWQ6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgcm9sZTogJ0FETUlOJyB8ICdDT0FDSCcgfCAnQVBQUkVOQU5UJyB8ICdSRVNUQVVSQVRFVVInIHwgJ1ZJR0lMJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMZWFybmVyIHtcbiAgW3g6IHN0cmluZ106IGFueTtcbiAgZW1haWw6IFJlYWN0Tm9kZTtcbiAgaWQ6IHN0cmluZztcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIGFkZHJlc3M/OiBzdHJpbmc7XG4gIGdlbmRlcjogJ01BTEUnIHwgJ0ZFTUFMRSc7XG4gIGJpcnRoRGF0ZTogc3RyaW5nO1xuICBiaXJ0aFBsYWNlOiBzdHJpbmc7XG4gIHBob25lOiBzdHJpbmc7XG4gIHBob3RvVXJsPzogc3RyaW5nO1xuICBzdGF0dXM6ICdBQ1RJVkUnIHwgJ0lOQUNUSVZFJyB8ICdTVVNQRU5ERUQnIHwgJ1JFUExBQ0VEJyB8ICdXQUlUSU5HX0xJU1QnO1xuICBxckNvZGU6IHN0cmluZztcbiAgdXNlcklkOiBzdHJpbmc7XG4gIHJlZklkPzogc3RyaW5nO1xuICBwcm9tb3Rpb25JZDogc3RyaW5nO1xuICBjcmVhdGVkQXQ6IHN0cmluZztcbiAgdXBkYXRlZEF0OiBzdHJpbmc7XG4gIHJlZmVyZW50aWFsPzogUmVmZXJlbnRpYWw7XG4gIHByb21vdGlvbj86IFByb21vdGlvbjtcbiAgYXR0ZW5kYW5jZXM/OiBMZWFybmVyQXR0ZW5kYW5jZVtdO1xuICBraXQ/OiBLaXQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvbW90aW9uIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBzdGFydERhdGU6IHN0cmluZztcbiAgZW5kRGF0ZTogc3RyaW5nO1xuICBwaG90b1VybD86IHN0cmluZztcbiAgc3RhdHVzOiAnQUNUSVZFJyB8ICdDT01QTEVURUQnIHwgJ0NBTkNFTExFRCc7XG4gIGxlYXJuZXJzPzogTGVhcm5lcltdO1xuICByZWZlcmVudGlhbHM/OiBSZWZlcmVudGlhbFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlZmVyZW50aWFsIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgcGhvdG9Vcmw/OiBzdHJpbmc7XG4gIGNhcGFjaXR5OiBudW1iZXI7XG4gIGxlYXJuZXJzPzogTGVhcm5lcltdO1xuICBtb2R1bGVzPzogTW9kdWxlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kdWxlIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgcGhvdG9Vcmw/OiBzdHJpbmc7XG4gIHN0YXJ0RGF0ZTogc3RyaW5nO1xuICBlbmREYXRlOiBzdHJpbmc7XG4gIGNvYWNoSWQ6IHN0cmluZztcbiAgcmVmSWQ6IHN0cmluZztcbiAgcmVmZXJlbnRpYWw/OiBSZWZlcmVudGlhbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMZWFybmVyQXR0ZW5kYW5jZSB7XG4gIGlkOiBzdHJpbmc7XG4gIGRhdGU6IHN0cmluZztcbiAgaXNQcmVzZW50OiBib29sZWFuO1xuICBpc0xhdGU6IGJvb2xlYW47XG4gIHNjYW5UaW1lPzogc3RyaW5nO1xuICBqdXN0aWZpY2F0aW9uPzogc3RyaW5nO1xuICBqdXN0aWZpY2F0aW9uQ29tbWVudD86IHN0cmluZztcbiAgc3RhdHVzOiAnUEVORElORycgfCAnQVBQUk9WRUQnIHwgJ1JFSkVDVEVEJztcbiAgZG9jdW1lbnRVcmw/OiBzdHJpbmc7XG4gIGxlYXJuZXJJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEtpdCB7XG4gIGlkOiBzdHJpbmc7XG4gIGxhcHRvcDogYm9vbGVhbjtcbiAgY2hhcmdlcjogYm9vbGVhbjtcbiAgYmFnOiBib29sZWFuO1xuICBwb2xvOiBib29sZWFuO1xuICBsZWFybmVySWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXR0ZW5kYW5jZVN0YXRzIHtcbiAgcHJlc2VudDogbnVtYmVyO1xuICBhYnNlbnQ6IG51bWJlcjtcbiAgbGF0ZTogbnVtYmVyO1xuICB0b3RhbERheXM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHcmFkZSB7XG4gIGlkOiBzdHJpbmc7XG4gIHNjb3JlOiBudW1iZXI7XG4gIGNvbW1lbnQ/OiBzdHJpbmc7XG4gIGRhdGU6IHN0cmluZztcbiAgbW9kdWxlSWQ6IHN0cmluZztcbiAgbGVhcm5lcklkOiBzdHJpbmc7XG4gIG1vZHVsZT86IE1vZHVsZTtcbiAgbGVhcm5lcj86IExlYXJuZXI7XG59XG5cbi8vIExlYXJuZXJzIEFQSSBjYWxsc1xuZXhwb3J0IGNvbnN0IGxlYXJuZXJzQVBJID0ge1xuICBnZXRBbGxMZWFybmVyczogYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9sZWFybmVycycpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGdldExlYXJuZXJCeUlkOiBhc3luYyAoaWQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9sZWFybmVycy8ke2lkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGdldExlYXJuZXJBdHRlbmRhbmNlU3RhdHM6IGFzeW5jIChsZWFybmVySWQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9sZWFybmVycy8ke2xlYXJuZXJJZH0vYXR0ZW5kYW5jZS1zdGF0c2ApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGF0dGVuZGFuY2Ugc3RhdHM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LFxuICBcbiAgZ2V0R2VuZGVyRGlzdHJpYnV0aW9uOiBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2xlYXJuZXJzL3N0YXRzL2dlbmRlcicpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIHVwZGF0ZUxlYXJuZXJTdGF0dXM6IGFzeW5jIChpZDogc3RyaW5nLCBzdGF0dXM6IHN0cmluZywgcmVhc29uPzogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBhdGNoKGAvbGVhcm5lcnMvJHtpZH0vc3RhdHVzYCwgeyBzdGF0dXMsIHJlYXNvbiB9KTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICB1cGRhdGVMZWFybmVyS2l0OiBhc3luYyAoaWQ6IHN0cmluZywga2l0RGF0YTogUGFydGlhbDxLaXQ+KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnB1dChgL2xlYXJuZXJzLyR7aWR9L2tpdGAsIGtpdERhdGEpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGdldFdhaXRpbmdMaXN0OiBhc3luYyAocHJvbW90aW9uSWQ/OiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXJsID0gcHJvbW90aW9uSWQgXG4gICAgICAgID8gYC9sZWFybmVycy93YWl0aW5nLWxpc3Q/cHJvbW90aW9uSWQ9JHtwcm9tb3Rpb25JZH1gXG4gICAgICAgIDogJy9sZWFybmVycy93YWl0aW5nLWxpc3QnO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KHVybCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgcmVwbGFjZUxlYXJuZXI6IGFzeW5jIChyZXBsYWNlZElkOiBzdHJpbmcsIHJlcGxhY2VtZW50SWQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvbGVhcm5lcnMvcmVwbGFjZScsIHtcbiAgICAgICAgcmVwbGFjZWRJZCxcbiAgICAgICAgcmVwbGFjZW1lbnRJZCxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcblxuICBnZXRMZWFybmVyQnlFbWFpbDogYXN5bmMgKGVtYWlsOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvbGVhcm5lcnMvZW1haWwvJHtlbWFpbH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBsZWFybmVyIGJ5IGVtYWlsOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcbn07XG5cbi8vIE1vZHVsZXMgQVBJIGNhbGxzXG5leHBvcnQgY29uc3QgbW9kdWxlc0FQSSA9IHtcbiAgZ2V0QWxsTW9kdWxlczogYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9tb2R1bGVzJyk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZ2V0TW9kdWxlQnlJZDogYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvbW9kdWxlcy8ke2lkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGdldEFjdGl2ZU1vZHVsZXNCeUxlYXJuZXI6IGFzeW5jIChsZWFybmVySWQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9tb2R1bGVzL2FjdGl2ZS9sZWFybmVyLyR7bGVhcm5lcklkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIG1vZHVsZXM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSxcbiAgXG4gIGNyZWF0ZU1vZHVsZTogYXN5bmMgKG1vZHVsZURhdGE6IFBhcnRpYWw8TW9kdWxlPikgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvbW9kdWxlcycsIG1vZHVsZURhdGEpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIHVwZGF0ZU1vZHVsZTogYXN5bmMgKGlkOiBzdHJpbmcsIG1vZHVsZURhdGE6IFBhcnRpYWw8TW9kdWxlPikgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQoYC9tb2R1bGVzLyR7aWR9YCwgbW9kdWxlRGF0YSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZGVsZXRlTW9kdWxlOiBhc3luYyAoaWQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5kZWxldGUoYC9tb2R1bGVzLyR7aWR9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxufTtcblxuLy8gUmVmZXJlbnRpYWxzIEFQSSBjYWxsc1xuZXhwb3J0IGNvbnN0IHJlZmVyZW50aWFsc0FQSSA9IHtcbiAgZ2V0QWxsUmVmZXJlbnRpYWxzOiBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL3JlZmVyZW50aWFscycpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGdldFJlZmVyZW50aWFsQnlJZDogYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvcmVmZXJlbnRpYWxzLyR7aWR9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgY3JlYXRlUmVmZXJlbnRpYWw6IGFzeW5jIChyZWZlcmVudGlhbERhdGE6IFBhcnRpYWw8UmVmZXJlbnRpYWw+KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoJy9yZWZlcmVudGlhbHMnLCByZWZlcmVudGlhbERhdGEpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIHVwZGF0ZVJlZmVyZW50aWFsOiBhc3luYyAoaWQ6IHN0cmluZywgcmVmZXJlbnRpYWxEYXRhOiBQYXJ0aWFsPFJlZmVyZW50aWFsPikgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQoYC9yZWZlcmVudGlhbHMvJHtpZH1gLCByZWZlcmVudGlhbERhdGEpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGRlbGV0ZVJlZmVyZW50aWFsOiBhc3luYyAoaWQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5kZWxldGUoYC9yZWZlcmVudGlhbHMvJHtpZH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG59O1xuXG4vLyBHcmFkZXMgQVBJIGNhbGxzXG5leHBvcnQgY29uc3QgZ3JhZGVzQVBJID0ge1xuICBnZXRHcmFkZXNCeUxlYXJuZXI6IGFzeW5jIChsZWFybmVySWQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9ncmFkZXMvbGVhcm5lci8ke2xlYXJuZXJJZH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBnZXRHcmFkZXNCeU1vZHVsZTogYXN5bmMgKG1vZHVsZUlkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvZ3JhZGVzL21vZHVsZS8ke21vZHVsZUlkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGNyZWF0ZUdyYWRlOiBhc3luYyAoZ3JhZGVEYXRhOiBQYXJ0aWFsPEdyYWRlPikgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvZ3JhZGVzJywgZ3JhZGVEYXRhKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICB1cGRhdGVHcmFkZTogYXN5bmMgKGlkOiBzdHJpbmcsIGdyYWRlRGF0YTogUGFydGlhbDxHcmFkZT4pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucHV0KGAvZ3JhZGVzLyR7aWR9YCwgZ3JhZGVEYXRhKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBkZWxldGVHcmFkZTogYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZGVsZXRlKGAvZ3JhZGVzLyR7aWR9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxufTtcblxuLy8gQXR0ZW5kYW5jZSBBUEkgY2FsbHNcbmV4cG9ydCBjb25zdCBhdHRlbmRhbmNlQVBJID0ge1xuICBnZXRBdHRlbmRhbmNlQnlMZWFybmVyOiBhc3luYyAobGVhcm5lcklkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvYXR0ZW5kYW5jZS9sZWFybmVyLyR7bGVhcm5lcklkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGdldERhaWx5U3RhdHM6IGFzeW5jIChkYXRlOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvYXR0ZW5kYW5jZS9zdGF0cy9kYWlseT9kYXRlPSR7ZGF0ZX1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBnZXRNb250aGx5U3RhdHM6IGFzeW5jICh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvYXR0ZW5kYW5jZS9zdGF0cy9tb250aGx5P3llYXI9JHt5ZWFyfSZtb250aD0ke21vbnRofWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcblxuICBnZXRZZWFybHlTdGF0czogYXN5bmMgKHllYXI6IG51bWJlcikgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9hdHRlbmRhbmNlL3N0YXRzL3llYXJseT95ZWFyPSR7eWVhcn1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBnZXRMYXRlc3RTY2FuczogYXN5bmMgKGxpbWl0OiBudW1iZXIgPSAxMCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9hdHRlbmRhbmNlL3NjYW5zL2xhdGVzdD9saW1pdD0ke2xpbWl0fWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIHNjYW5MZWFybmVyOiBhc3luYyAocXJDb2RlOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2F0dGVuZGFuY2Uvc2NhbicsIHsgcXJDb2RlIH0pO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGFwcHJvdmVKdXN0aWZpY2F0aW9uOiBhc3luYyAoYXR0ZW5kYW5jZUlkOiBzdHJpbmcsIGFwcHJvdmVkOiBib29sZWFuLCBjb21tZW50Pzogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBhdGNoKGAvYXR0ZW5kYW5jZS8ke2F0dGVuZGFuY2VJZH0vanVzdGlmeWAsIHsgXG4gICAgICAgIHN0YXR1czogYXBwcm92ZWQgPyAnQVBQUk9WRUQnIDogJ1JFSkVDVEVEJyxcbiAgICAgICAgY29tbWVudFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxufTtcblxuLy8gUHJvbW90aW9ucyBBUEkgY2FsbHNcbmV4cG9ydCBjb25zdCBwcm9tb3Rpb25zQVBJID0ge1xuICBnZXRBbGxQcm9tb3Rpb25zOiBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL3Byb21vdGlvbnMnKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICBnZXRQcm9tb3Rpb25CeUlkOiBhc3luYyAoaWQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9wcm9tb3Rpb25zLyR7aWR9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgY3JlYXRlUHJvbW90aW9uOiBhc3luYyAocHJvbW90aW9uRGF0YTogUGFydGlhbDxQcm9tb3Rpb24+KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoJy9wcm9tb3Rpb25zJywgcHJvbW90aW9uRGF0YSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59O1xuXG4vLyBDb2FjaGVzIEFQSSBjYWxsc1xuZXhwb3J0IGNvbnN0IGNvYWNoZXNBUEkgPSB7XG4gIGdldENvYWNoQnlFbWFpbDogYXN5bmMgKGVtYWlsOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvY29hY2hlcy9lbWFpbC8ke2VtYWlsfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGNvYWNoIGJ5IGVtYWlsOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcbn07XG5cbi8vIFVzZXJzIEFQSSBjYWxsc1xuZXhwb3J0IGNvbnN0IHVzZXJzQVBJID0ge1xuICBnZXRVc2VyQnlFbWFpbDogYXN5bmMgKGVtYWlsOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvdXNlcnMvZW1haWwvJHtlbWFpbH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB1c2VyIGJ5IGVtYWlsOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcblxuICBnZXRVc2VyQnlJZDogYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvdXNlcnMvJHtpZH1gKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB1c2VyIGJ5IGlkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcblxuICBnZXRVc2VyRGV0YWlsc1dpdGhQaG90bzogYXN5bmMgKGVtYWlsOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvdXNlcnMvZW1haWwvJHtlbWFpbH1gKTtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXNwb25zZS5kYXRhO1xuICAgICAgXG4gICAgICBpZiAoIXVzZXIgfHwgIXVzZXIuZGV0YWlscykge1xuICAgICAgICBjb25zb2xlLmxvZygnTm8gdXNlciBkZXRhaWxzIGZvdW5kIGZvcjonLCBlbWFpbCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgcGhvdG8gVVJMIGJhc2VkIG9uIHJvbGVcbiAgICAgIGxldCBwaG90b1VybCA9IG51bGw7XG4gICAgICBpZiAodXNlci5kZXRhaWxzKSB7XG4gICAgICAgIHBob3RvVXJsID0gdXNlci5kZXRhaWxzLnBob3RvVXJsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi51c2VyLFxuICAgICAgICBwaG90b1VybFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciBkZXRhaWxzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcblxuICBnZXRVc2VyUGhvdG86IGFzeW5jIChlbWFpbDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7IC8vIE1ha2Ugc3VyZSB0byBpbmNsdWRlIHRoZSBKV1QgdG9rZW5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgL3VzZXJzL3Bob3RvLyR7ZW1haWx9YCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5waG90b1VybDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciBwaG90bzonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFwaTsiXSwibmFtZXMiOlsiYXhpb3MiLCJhcGkiLCJjcmVhdGUiLCJiYXNlVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJoZWFkZXJzIiwiaW50ZXJjZXB0b3JzIiwicmVxdWVzdCIsInVzZSIsImNvbmZpZyIsInRva2VuIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkF1dGhvcml6YXRpb24iLCJyZXNwb25zZSIsImVycm9yIiwic3RhdHVzIiwicmVtb3ZlSXRlbSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsIlByb21pc2UiLCJyZWplY3QiLCJhdXRoQVBJIiwibG9naW4iLCJlbWFpbCIsInBhc3N3b3JkIiwiY29uc29sZSIsImxvZyIsInBvc3QiLCJkYXRhIiwiRXJyb3IiLCJsZWFybmVyc0FQSSIsImdldEFsbExlYXJuZXJzIiwiZ2V0IiwiZ2V0TGVhcm5lckJ5SWQiLCJpZCIsImdldExlYXJuZXJBdHRlbmRhbmNlU3RhdHMiLCJsZWFybmVySWQiLCJnZXRHZW5kZXJEaXN0cmlidXRpb24iLCJ1cGRhdGVMZWFybmVyU3RhdHVzIiwicmVhc29uIiwicGF0Y2giLCJ1cGRhdGVMZWFybmVyS2l0Iiwia2l0RGF0YSIsInB1dCIsImdldFdhaXRpbmdMaXN0IiwicHJvbW90aW9uSWQiLCJ1cmwiLCJyZXBsYWNlTGVhcm5lciIsInJlcGxhY2VkSWQiLCJyZXBsYWNlbWVudElkIiwiZ2V0TGVhcm5lckJ5RW1haWwiLCJtb2R1bGVzQVBJIiwiZ2V0QWxsTW9kdWxlcyIsImdldE1vZHVsZUJ5SWQiLCJnZXRBY3RpdmVNb2R1bGVzQnlMZWFybmVyIiwiY3JlYXRlTW9kdWxlIiwibW9kdWxlRGF0YSIsInVwZGF0ZU1vZHVsZSIsImRlbGV0ZU1vZHVsZSIsImRlbGV0ZSIsInJlZmVyZW50aWFsc0FQSSIsImdldEFsbFJlZmVyZW50aWFscyIsImdldFJlZmVyZW50aWFsQnlJZCIsImNyZWF0ZVJlZmVyZW50aWFsIiwicmVmZXJlbnRpYWxEYXRhIiwidXBkYXRlUmVmZXJlbnRpYWwiLCJkZWxldGVSZWZlcmVudGlhbCIsImdyYWRlc0FQSSIsImdldEdyYWRlc0J5TGVhcm5lciIsImdldEdyYWRlc0J5TW9kdWxlIiwibW9kdWxlSWQiLCJjcmVhdGVHcmFkZSIsImdyYWRlRGF0YSIsInVwZGF0ZUdyYWRlIiwiZGVsZXRlR3JhZGUiLCJhdHRlbmRhbmNlQVBJIiwiZ2V0QXR0ZW5kYW5jZUJ5TGVhcm5lciIsImdldERhaWx5U3RhdHMiLCJkYXRlIiwiZ2V0TW9udGhseVN0YXRzIiwieWVhciIsIm1vbnRoIiwiZ2V0WWVhcmx5U3RhdHMiLCJnZXRMYXRlc3RTY2FucyIsImxpbWl0Iiwic2NhbkxlYXJuZXIiLCJxckNvZGUiLCJhcHByb3ZlSnVzdGlmaWNhdGlvbiIsImF0dGVuZGFuY2VJZCIsImFwcHJvdmVkIiwiY29tbWVudCIsInByb21vdGlvbnNBUEkiLCJnZXRBbGxQcm9tb3Rpb25zIiwiZ2V0UHJvbW90aW9uQnlJZCIsImNyZWF0ZVByb21vdGlvbiIsInByb21vdGlvbkRhdGEiLCJjb2FjaGVzQVBJIiwiZ2V0Q29hY2hCeUVtYWlsIiwidXNlcnNBUEkiLCJnZXRVc2VyQnlFbWFpbCIsImdldFVzZXJCeUlkIiwiZ2V0VXNlckRldGFpbHNXaXRoUGhvdG8iLCJ1c2VyIiwiZGV0YWlscyIsInBob3RvVXJsIiwiZ2V0VXNlclBob3RvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});